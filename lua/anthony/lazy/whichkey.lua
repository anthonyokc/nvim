return {
    "folke/which-key.nvim",
    event = "VeryLazy",
    config = function()
        local wk = require("which-key")
        wk.add({
            { "<leader>f",  group = "file" }, -- group
            { "<leader>ff", "<cmd>Telescope find_files<cr>", desc = "Find File", mode = "n" },
            { "<leader>fg", desc = "Telescope grep" },
            { "<leader>fn", desc = "Telecope Notify" },
            { "<leader>fN", desc = "Telecope Noice" },
            { "<leader>fr", desc = "Find Git Worktree" },
            { "<leader>fR", desc = "Create Git Worktree" },
            { "<leader>ft", desc = "Find TODO's" },
            { "<leader>fy", desc = "Find Clipboard History" },
        })
        wk.add({
            {
                mode = { "v" },
                nowait = true,
                remap = false,
                { "<leader>c<C-t>", ":<C-u>'<,'>GpChatNew tabnew<cr>",               desc = "ChatNew tabnew" },
                { "<leader>c<C-v>", ":<C-u>'<,'>GpChatNew vsplit<cr>",               desc = "ChatNew vsplit" },
                { "<leader>c<C-x>", ":<C-u>'<,'>GpChatNew split<cr>",                desc = "ChatNew split" },
                { "<leader>ca",     ":<C-u>'<,'>GpAppend<cr>",                       desc = "Visual Append (after)" },
                { "<leader>cb",     ":<C-u>'<,'>GpPrepend<cr>",                      desc = "Visual Prepend (before)" },
                { "<leader>cc",     ":<C-u>'<,'>GpChatNew<cr>",                      desc = "Visual Chat New" },
                { "<leader>cg",     group = "generate into new .." },
                { "<leader>cge",    ":<C-u>'<,'>GpEnew<cr>",                         desc = "Visual GpEnew" },
                { "<leader>cgn",    ":<C-u>'<,'>GpNew<cr>",                          desc = "Visual GpNew" },
                { "<leader>cgp",    ":<C-u>'<,'>GpPopup<cr>",                        desc = "Visual Popup" },
                { "<leader>cgt",    ":<C-u>'<,'>GpTabnew<cr>",                       desc = "Visual GpTabnew" },
                { "<leader>cgv",    ":<C-u>'<,'>GpVnew<cr>",                         desc = "Visual GpVnew" },
                { "<leader>ci",     ":<C-u>'<,'>GpImplement<cr>",                    desc = "Implement selection" },
                { "<leader>cn",     "<cmd>GpNextAgent<cr>",                          desc = "Next Agent" },
                { "<leader>cp",     ":<C-u>'<,'>GpChatPaste<cr>",                    desc = "Visual Chat Paste" },
                { "<leader>cr",     ":<C-u>'<,'>GpRewrite<cr>",                      desc = "Visual Rewrite" },
                { "<leader>cs",     "<cmd>GpStop<cr>",                               desc = "GpStop" },
                { "<leader>ct",     ":<C-u>'<,'>GpChatToggle<cr>",                   desc = "Visual Toggle Chat" },
                { "<leader>cw",     group = "Whisper" },
                { "<leader>cwa",    ":<C-u>'<,'>GpWhisperAppend<cr>",                desc = "Whisper Append" },
                { "<leader>cwb",    ":<C-u>'<,'>GpWhisperPrepend<cr>",               desc = "Whisper Prepend" },
                { "<leader>cwe",    ":<C-u>'<,'>GpWhisperEnew<cr>",                  desc = "Whisper Enew" },
                { "<leader>cwn",    ":<C-u>'<,'>GpWhisperNew<cr>",                   desc = "Whisper New" },
                { "<leader>cwp",    ":<C-u>'<,'>GpWhisperPopup<cr>",                 desc = "Whisper Popup" },
                { "<leader>cwr",    ":<C-u>'<,'>GpWhisperRewrite<cr>",               desc = "Whisper Rewrite" },
                { "<leader>cwt",    ":<C-u>'<,'>GpWhisperTabnew<cr>",                desc = "Whisper Tabnew" },
                { "<leader>cwv",    ":<C-u>'<,'>GpWhisperVnew<cr>",                  desc = "Whisper Vnew" },
                { "<leader>cww",    ":<C-u>'<,'>GpWhisper<cr>",                      desc = "Whisper" },
                { "<leader>cx",     ":<C-u>'<,'>GpContext<cr>",                      desc = "Visual GpContext" },
                { "<leader>g",     group = "ChatGPT" },
                { "<leader>gc",     "<cmd>ChatGPT<CR>",                              desc = "ChatGPT" },
                { "<leader>ge",     "<cmd>ChatGPTEditWithInstruction<CR>",           desc = "Edit with instruction" },
                { "<leader>gg",     "<cmd>ChatGPTRun grammar_correction<CR>",        desc = "Grammar Correction" },
                { "<leader>gk",     "<cmd>ChatGPTRun keywords<CR>",                  desc = "Keywords" },
                { "<leader>gd",     "<cmd>ChatGPTRun docstring<CR>",                 desc = "Docstring" },
                { "<leader>ga",     "<cmd>ChatGPTRun add_tests<CR>",                 desc = "Add Tests" },
                { "<leader>go",     "<cmd>ChatGPTRun optimize_code<CR>",             desc = "Optimize Code" },
                { "<leader>gs",     "<cmd>ChatGPTRun summarize<CR>",                 desc = "Summarize" },
                { "<leader>gf",     "<cmd>ChatGPTRun fix_bugs<CR>",                  desc = "Fix Bugs" },
                { "<leader>gx",     "<cmd>ChatGPTRun explain_code<CR>",              desc = "Explain Code" },
                { "<leader>gr",     "<cmd>ChatGPTRun roxygen_edit<CR>",              desc = "Roxygen Edit" },
                { "<leader>gl",     "<cmd>ChatGPTRun code_readability_analysis<CR>", desc = "Code Readability Analysis" },
            },

            -- NORMAL mode mappings
            {
                mode = { "n" },
                nowait = true,
                remap = false,
                { "<leader>c<C-t>", "<cmd>GpChatNew tabnew<cr>",   desc = "New Chat tabnew" },
                { "<leader>c<C-v>", "<cmd>GpChatNew vsplit<cr>",   desc = "New Chat vsplit" },
                { "<leader>c<C-x>", "<cmd>GpChatNew split<cr>",    desc = "New Chat split" },
                { "<leader>ca",     "<cmd>GpAppend<cr>",           desc = "Append (after)" },
                { "<leader>cb",     "<cmd>GpPrepend<cr>",          desc = "Prepend (before)" },
                { "<leader>cc",     "<cmd>GpChatNew<cr>",          desc = "New Chat" },
                { "<leader>cf",     "<cmd>GpChatFinder<cr>",       desc = "Chat Finder" },
                { "<leader>cg",     group = "generate into new .." },
                { "<leader>cge",    "<cmd>GpEnew<cr>",             desc = "GpEnew" },
                { "<leader>cgn",    "<cmd>GpNew<cr>",              desc = "GpNew" },
                { "<leader>cgp",    "<cmd>GpPopup<cr>",            desc = "Popup" },
                { "<leader>cgt",    "<cmd>GpTabnew<cr>",           desc = "GpTabnew" },
                { "<leader>cgv",    "<cmd>GpVnew<cr>",             desc = "GpVnew" },
                { "<leader>cn",     "<cmd>GpNextAgent<cr>",        desc = "Next Agent" },
                { "<leader>cr",     "<cmd>GpRewrite<cr>",          desc = "Inline Rewrite" },
                { "<leader>cs",     "<cmd>GpStop<cr>",             desc = "GpStop" },
                { "<leader>ct",     "<cmd>GpChatToggle<cr>",       desc = "Toggle Chat" },
                { "<leader>cw",     group = "Whisper" },
                { "<leader>cwa",    "<cmd>GpWhisperAppend<cr>",    desc = "Whisper Append (after)" },
                { "<leader>cwb",    "<cmd>GpWhisperPrepend<cr>",   desc = "Whisper Prepend (before)" },
                { "<leader>cwe",    "<cmd>GpWhisperEnew<cr>",      desc = "Whisper Enew" },
                { "<leader>cwn",    "<cmd>GpWhisperNew<cr>",       desc = "Whisper New" },
                { "<leader>cwp",    "<cmd>GpWhisperPopup<cr>",     desc = "Whisper Popup" },
                { "<leader>cwr",    "<cmd>GpWhisperRewrite<cr>",   desc = "Whisper Inline Rewrite" },
                { "<leader>cwt",    "<cmd>GpWhisperTabnew<cr>",    desc = "Whisper Tabnew" },
                { "<leader>cwv",    "<cmd>GpWhisperVnew<cr>",      desc = "Whisper Vnew" },
                { "<leader>cww",    "<cmd>GpWhisper<cr>",          desc = "Whisper" },
                { "<leader>cx",     "<cmd>GpContext<cr>",          desc = "Toggle GpContext" },
                { "<leader>g",     group = "ChatGPT" },
                { "<leader>gc",     "<cmd>ChatGPT<CR>",                              desc = "ChatGPT" },
                { "<leader>ge",     "<cmd>ChatGPTEditWithInstruction<CR>",           desc = "Edit with instruction" },
                { "<leader>gg",     "<cmd>ChatGPTRun grammar_correction<CR>",        desc = "Grammar Correction" },
                { "<leader>gk",     "<cmd>ChatGPTRun keywords<CR>",                  desc = "Keywords" },
                { "<leader>gd",     "<cmd>ChatGPTRun docstring<CR>",                 desc = "Docstring" },
                { "<leader>ga",     "<cmd>ChatGPTRun add_tests<CR>",                 desc = "Add Tests" },
                { "<leader>go",     "<cmd>ChatGPTRun optimize_code<CR>",             desc = "Optimize Code" },
                { "<leader>gs",     "<cmd>ChatGPTRun summarize<CR>",                 desc = "Summarize" },
                { "<leader>gf",     "<cmd>ChatGPTRun fix_bugs<CR>",                  desc = "Fix Bugs" },
                { "<leader>gx",     "<cmd>ChatGPTRun explain_code<CR>",              desc = "Explain Code" },
                { "<leader>gr",     "<cmd>ChatGPTRun roxygen_edit<CR>",              desc = "Roxygen Edit" },
                { "<leader>gl",     "<cmd>ChatGPTRun code_readability_analysis<CR>", desc = "Code Readability Analysis" },
            },
        })
    end,
    opts = {
        -- your configuration comes here
        -- or leave it empty to use the default settings
        -- refer to the configuration section below
    },
    keys = {
        {
            "<leader>?",
            function()
                require("which-key").show({ global = false })
            end,
            desc = "Buffer Local Keymaps (which-key)",
        },
    },
}
